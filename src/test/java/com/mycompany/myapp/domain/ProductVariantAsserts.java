package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductVariantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantAutoGeneratedPropertiesEquals(expected, actual);
        assertProductVariantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllUpdatablePropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantUpdatableFieldsEquals(expected, actual);
        assertProductVariantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAutoGeneratedPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(expected)
            .as("Verify ProductVariant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableFieldsEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(expected)
            .as("Verify ProductVariant relevant properties")
            .satisfies(e -> assertThat(e.getCreatAt()).as("check creatAt").isEqualTo(actual.getCreatAt()))
            .satisfies(e -> assertThat(e.getUpdateAt()).as("check updateAt").isEqualTo(actual.getUpdateAt()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableRelationshipsEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(expected)
            .as("Verify ProductVariant relationships")
            .satisfies(e -> assertThat(e.getAttributeValues()).as("check attributeValues").isEqualTo(actual.getAttributeValues()));
    }
}
